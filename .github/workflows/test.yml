name: Test
on:
  push:
  workflow_dispatch:
concurrency: 
  group: test
  cancel-in-progress: true

jobs:
  builds:
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Windows
            os: windows-latest
          - name: Linux
            os: ubuntu-latest
          - name: Darwin
            os: macos-latest
    runs-on: ${{ matrix.os }}
    steps:
      - name: Prepare common shell (Windows)
        if: runner.os == 'Windows'
        uses: Vampire/setup-wsl@v2
        with:
          additional-packages:
            mkisofs
            openssh-client
      - name: Prepare common shell (Linux)
        if: runner.os == 'Linux'
        run: |
          mkdir bash-redirect
          ln -s $(which bash) bash-redirect/wsl-bash
          echo "$PWD/bash-redirect" >> $GITHUB_PATH
      - name: Prepare common shell (Darwin)
        if: runner.os == 'macOS'
        run: |
          mkdir bash-redirect
          ln -s $(which bash) bash-redirect/wsl-bash
          echo "$PWD/bash-redirect" >> $GITHUB_PATH
      - name: Install dependencies (Windows)
        if: runner.os == 'Windows'
        run: |
          choco install qemu
          Add-Content $env:GITHUB_PATH "C:\Program Files\qemu"
          echo "C:\\Windows\\System32\\bash.exe" >> $GITHUB_PATH
      - name: Install dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get -y install qemu-system mkisofs
      - name: Install dependencies (Darwin)
        if: runner.os == 'macOS'
        run: |
          brew install qemu --force
          brew install dvdrtools
      - name: Fetch prebuilt Debian image
        run: |
          aria2c https://cloud.debian.org/images/cloud/bookworm/latest/debian-12-genericcloud-amd64.qcow2 -o debian.iso
      - name: Generate SSH keys
        run: |
          ssh-keygen -b 2048 -t rsa -f sshkey -q -N ""
          echo "PUBLIC_KEY=$(cat sshkey.pub)" >> $GITHUB_ENV
          {
            echo 'PRIVATE_KEY<<EOF'
            cat sshkey
            echo EOF
          } >> "$GITHUB_ENV"
        shell: wsl-bash {0}
        env:
          WSLENV: GITHUB_ENV/p
      - name: Test env vars
        run: |
          echo "$PUBLIC_KEY"
      - name: Prepare cloud-init data
        run: |
          echo "$PUBLIC_KEY"
          cat <<EOF >> user-data
          #cloud-config
          ssh_authorized_keys:
            - ${{ env.PUBLIC_KEY }}
          EOF
          cat user-data
          touch meta-data
          mkisofs -output seed.iso -volid cidata -joliet -rock user-data meta-data
        shell: wsl-bash {0}
        env:
          WSLENV: GITHUB_ENV/p


          
