name: Test
on:
  push:
  workflow_dispatch:
concurrency: 
  group: test
  cancel-in-progress: true

jobs:
  builds:
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Windows
            os: windows-latest
          - name: Linux
            os: ubuntu-latest
          - name: Darwin
            os: macos-latest
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - uses: insightsengineering/pip-action@v2
        with:
          packages: |
            qemu.qmp==0.0.3
      - name: Get paths
        id: get_paths
        run: |
          import os
          relpath = "${{ runner.temp }}" or "./"
          abspath = os.path.abspath(relpath)
          with open(os.environ['GITHUB_OUTPUT'], 'a') as fh:
              print(f'OUTDIR={abspath}', file=fh)
        shell: python
      - name: Prepare common shell (Windows)
        if: runner.os == 'Windows'
        uses: Vampire/setup-wsl@v2
        with:
          additional-packages:
            ca-certificates
            openssl
            aria2
      - name: Prepare common shell (Linux)
        if: runner.os == 'Linux'
        run: |
          mkdir bash-redirect
          ln -s $(which bash) bash-redirect/wsl-bash
          echo "$PWD/bash-redirect" >> $GITHUB_PATH
      - name: Prepare common shell (Darwin)
        if: runner.os == 'macOS'
        run: |
          mkdir bash-redirect
          ln -s $(which bash) bash-redirect/wsl-bash
          echo "$PWD/bash-redirect" >> $GITHUB_PATH
      - name: Install dependencies (Windows)
        if: runner.os == 'Windows'
        run: |
          choco install qemu
          Add-Content $env:GITHUB_PATH "C:\Program Files\qemu"
          echo "C:\\Windows\\System32\\bash.exe" >> $GITHUB_PATH
      - name: Install dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get -y install qemu-system
      - name: Install dependencies (Darwin)
        if: runner.os == 'macOS'
        run: |
          brew install qemu --force
      - name: Fetch prebuilt NixOS image manifest
        id: read_manifest
        uses: cityoflosangeles/fetch-latest-github-release@v2.0.3
        with:
          github_token: ${{ github.token }}
          repo_path: "physics-enthusiast/nixos-image"
      - name: Restore cache
        id: restore-cache-image
        uses: actions/cache/restore@v4
        with:
          path: ${{ runner.temp }}/nixos.qcow2
          key: ${{ steps.read_manifest.outputs.tag_name }}
      - name: Fetch prebuilt NixOS image
        if: steps.restore-cache-image.outputs.cache-hit != 'true' 
        run: |
          sudo aria2c --dir="$TMPDIR" --out=nixos.qcow2 https://github.com/physics-enthusiast/nixos-image/releases/download/${{ steps.read_manifest.outputs.tag_name }}/nixos.qcow2
        shell: wsl-bash {0}
        env:
          WSLENV: GITHUB_OUTPUT/p:TMPDIR/p
          TMPDIR: ${{ runner.temp }}
      - name: Save cache
        id: save-cache-image
        uses: actions/cache/save@v4
        if: steps.restore-cache-image.outputs.cache-hit != 'true'
        with:
          path: ${{ runner.temp }}/nixos.qcow2
          key: ${{ steps.read_manifest.outputs.tag_name }}
      - name: Start VM
        run: |
          import os
          import sys
          import asyncio
          from qemu.qmp import QMPClient
          cmd = f"qemu-system-x86_64 -nographic -m 4096 -chardev socket,path={os.environ['TMPDIR']}/qga.sock,server=on,wait=off,id=qga0 -device virtio-serial -device virtserialport,chardev=qga0,name=org.qemu.guest_agent.0 -smp {os.cpu_count()} -nic user -hda {os.environ['TMPDIR']}/nixos.qcow2"
          async def main():
              proc = await asyncio.create_subprocess_shell(cmd)
              await asyncio.sleep(10)
              qmp = QMPClient()
              qmp.await_greeting = False
              qmp.negotiate = False
              await qmp.connect(f"{os.environ['TMPDIR']}/qga.sock")
              res = await qmp.execute('guest-ping')
              print(f"VM status: {res}")
          asyncio.run(main())
        shell: python
        env:
          TMPDIR: ${{ runner.temp }}

          
