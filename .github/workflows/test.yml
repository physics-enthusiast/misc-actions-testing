name: Test
on:
  push:
  workflow_dispatch:
concurrency:
  group: test
  cancel-in-progress: true

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - run: |
          df -h
      - uses: DamianReeves/write-file-action@master
        with:
          path: flake.nix
          write-mode: overwrite
          contents: |
            {
            inputs = {
              nixpkgs.url = "github:bltavares/nixpkgs-upstream/mine";
              original = {
                url = "github:physics-enthusiast/nixos-image/main";
                inputs.nixpkgs.follows = "nixpkgs";
              };
            };

            outputs = { self, nixpkgs, original }:
            let
              pkgsAarch64 = import nixpkgs { system = "aarch64-linux"; };
            in
              original.outputs // {
              packages."aarch64-linux".default = pkgsAarch64.stdenv.mkDerivation {
                name = "out";

                unpackPhase = "true";

                nativeBuildInputs = [
                  pkgsAarch64.rustc
                ];

                depsBuildBuild = [
                  pkgsAarch64.strace
                ];

                buildPhase = ''
                  echo 'fn main() { }' > main.rs
                  gcc -dumpmachine
                  export QEMU_STRACE=1
                  export RUSTC_LOG=debug
                  #export LD_DEBUG=all
                  rustc main.rs
                '';

                installPhase = ''
                  cp main $out
                '';
              };
              nixosConfigurations.nixos =
                original.nixosConfigurations.nixos-nocloud-x86_64.extendModules {
                  modules = [
                    original.nixosConfigurations.nixos-nocloud-x86_64.config.formatConfigs."qcow"
                    ({ lib, ... }: {
                      options = {
                        fileExtension = lib.mkOption {
                          type = lib.types.str;
                          description = "Declare the path of the wanted file in the output directory";
                          default = "";
                        };
                        formatAttr = lib.mkOption {
                          type = lib.types.str;
                          description = "Declare the default attribute to build";
                        };
                      };
                    })
                    ({ config, pkgs, lib, ... }: {
                      boot = {
                        kernelPackages = pkgs.linuxPackages_latest;
                        binfmt = { 
                          emulatedSystems = [ "aarch64-linux" "armv7l-linux" ];
                          preferStaticEmulators = true;
                        };
                      };
                    })
                  ];
                };
              };
            }
      - name: Set Swap Space
        uses: pierotofy/set-swap-space@master
        with:
          swap-size-gb: 16
      - name: Setup Binfmt
        uses: docker/setup-qemu-action@v3
        with:
          image: 	tonistiigi/binfmt:desktop-master
      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@main
        with:
          extra-conf: |
            extra-platforms = aarch64-linux
      - run: |
          cat /etc/nix/nix.conf
          nix build --print-build-logs --no-link .#packages.aarch64-linux.default
      - uses: catchpoint/workflow-telemetry-action@master
      - uses: physics-enthusiast/nixos-run-action@main
        id: rebuild
        with:
          filesize: 40G
          memory: 16G
          image-path: /mnt/nixos.qcow2
          cmd: |
            sudo nixos-rebuild boot --max-jobs auto --cores 1 --flake '/tmp/mnt#nixos'
      - uses: physics-enthusiast/nixos-run-action@main
        with:
          filesize: 40G
          memory: 16G
          image-path: /mnt/nixos.qcow2
          cmd: |
            nix build --print-build-logs --no-link /tmp/mnt#packages.aarch64-linux.default
