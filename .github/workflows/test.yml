name: Test
on:
  push:
  workflow_dispatch:
concurrency: 
  group: test
  cancel-in-progress: true

jobs:
  builds:
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Windows
            os: windows-latest
          - name: Linux
            os: ubuntu-latest
          - name: Darwin
            os: macos-latest
    runs-on: ${{ matrix.os }}
    steps:
      - name: Get paths
        id: get_paths
        run: |
          import os
          relpath = "${{ runner.temp }}" or "./"
          abspath = os.path.abspath(relpath)
          with open(os.environ['GITHUB_OUTPUT'], 'a') as fh:
              print(f'OUTDIR={abspath}', file=fh)
        shell: python
      - name: Prepare common shell (Windows)
        if: runner.os == 'Windows'
        uses: Vampire/setup-wsl@v2
        with:
          additional-packages:
            mkisofs
            openssh-client
      - name: Prepare common shell (Linux)
        if: runner.os == 'Linux'
        run: |
          mkdir bash-redirect
          ln -s $(which bash) bash-redirect/wsl-bash
          echo "$PWD/bash-redirect" >> $GITHUB_PATH
      - name: Prepare common shell (Darwin)
        if: runner.os == 'macOS'
        run: |
          mkdir bash-redirect
          ln -s $(which bash) bash-redirect/wsl-bash
          echo "$PWD/bash-redirect" >> $GITHUB_PATH
      - name: Install dependencies (Windows)
        if: runner.os == 'Windows'
        run: |
          choco install qemu
          Add-Content $env:GITHUB_PATH "C:\Program Files\qemu"
          echo "C:\\Windows\\System32\\bash.exe" >> $GITHUB_PATH
      - name: Install dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get -y install qemu-system mkisofs
      - name: Install dependencies (Darwin)
        if: runner.os == 'macOS'
        run: |
          brew install qemu --force
          brew install dvdrtools
      - name: Fetch prebuilt Debian image
        run: |
          aria2c https://cloud.debian.org/images/cloud/bookworm/latest/debian-12-genericcloud-amd64.qcow2 -o $TMPDIR/debian.qcow2
        env:
          TMPDIR: ${{ runner.temp }}
      - name: Generate SSH keys
        id: ssh_keygen
        run: |
          ssh-keygen -b 2048 -t rsa -f $TMPDIR/sshkey -q -N ""
          echo "PUBLIC_KEY=$(cat $TMPDIR/sshkey.pub)" >> $GITHUB_OUTPUT
          {
            echo 'PRIVATE_KEY<<EOF'
            cat $TMPDIR/sshkey
            echo EOF
          } >> "$GITHUB_OUTPUT"
        shell: wsl-bash {0}
        env:
          WSLENV: GITHUB_OUTPUT/p:TMPDIR/p
          TMPDIR: ${{ runner.temp }}
      - name: Prepare cloud-init data
        run: |
          cat <<EOF >> $TMPDIR/user-data
          #cloud-config
          ssh_authorized_keys:
            - ${{ env.PUBLIC_KEY }}
          EOF
          cat $TMPDIR/user-data
          touch $TMPDIR/meta-data
          mkisofs -output $TMPDIR/seed.iso -volid cidata -joliet -rock $TMPDIR/user-data $TMPDIR/meta-data
        shell: wsl-bash {0}
        env:
          WSLENV: GITHUB_OUTPUT/p:TMPDIR/p:PUBLIC_KEY
          TMPDIR: ${{ runner.temp }}
          PUBLIC_KEY: ${{ STEPS.SSH_KEYGEN.OUTPUTS.PUBLIC_KEY }} 
      - name: Start VM
        run: |
          qemu-system-x86_64 -nographic -m 4096 -serial mon:stdio -hda $TMPDIR/debian.qcow2 -cdrom $TMPDIR/seed.iso
        env:
          TMPDIR: ${{ runner.temp }}
          
