name: Test
on:
  push:
  workflow_dispatch:
concurrency:
  group: test
  cancel-in-progress: true

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - run: |
          df -h
      - uses: DamianReeves/write-file-action@master
        with:
          path: flake.nix
          write-mode: overwrite
          contents: |
            {
            inputs = {
              nixpkgs.url = "github:physics-enthusiast/nixpkgs/qemu-no-vdso";
              original = {
                url = "github:physics-enthusiast/nixos-image/main";
                inputs.nixpkgs.follows = "nixpkgs";
              };
            };

            outputs = { self, nixpkgs, original }:
            let
              pkgsx86_64 = import nixpkgs { system = "x86_64-linux"; };
              qemu_src = pkgsx86_64.fetchFromGitLab {
                owner = "qemu-project";
                repo = "qemu";
                rev = "9622c697d1bb2addec4added61e3a0f6ad5e8bfb";
                hash = "sha256-bB+jrhDDm0cAtevtrb5lGa19R2UUDwIsiYQwOTIqTqY=";
                fetchSubmodules = true;
              };
              pkgsAarch64 = import nixpkgs { system = "aarch64-linux"; };
            in
              original.outputs // {
              packages."aarch64-linux".default = pkgsAarch64.stdenv.mkDerivation {
                name = "out";

                unpackPhase = "true";

                nativeBuildInputs = [
                  pkgsAarch64.rustc
                ];

                depsBuildBuild = [
                  pkgsAarch64.strace
                ];

                buildPhase = ''
                  echo 'fn main() { }' > main.rs
                  gcc -dumpmachine
                  export QEMU_STRACE=1
                  export RUSTC_LOG=debug
                  #export LD_DEBUG=all
                  declare -p
                  rustc main.rs
                '';

                installPhase = ''
                  cp main $out
                '';
              };
              packages."x86_64-linux".default = qemu_src;
              nixosConfigurations.nixos =
                original.nixosConfigurations.nixos-nocloud-x86_64.extendModules {
                  modules = [
                    original.nixosConfigurations.nixos-nocloud-x86_64.config.formatConfigs."qcow"
                    ({ lib, ... }: {
                      options = {
                        fileExtension = lib.mkOption {
                          type = lib.types.str;
                          description = "Declare the path of the wanted file in the output directory";
                          default = "";
                        };
                        formatAttr = lib.mkOption {
                          type = lib.types.str;
                          description = "Declare the default attribute to build";
                        };
                      };
                    })
                    ({ config, pkgs, lib, ... }: {            
                      nixpkgs.overlays = [
                        (final: prev: {
                          qemu-user-static = prev.qemu-user-static.overrideAttrs {
                            src = qemu_src;
                            passthru = pkgsx86_64.qemu-user-static.passthru;
                          };
                        })
                      ];
                      boot = {
                        kernelPackages = pkgs.linuxPackages_latest;
                        binfmt = { 
                          emulatedSystems = [ "aarch64-linux" "armv7l-linux" ];
                          preferStaticEmulators = true;
                        };
                      };
                    })
                  ];
                };
              };
            }
      - name: Set Swap Space
        uses: pierotofy/set-swap-space@master
        with:
          swap-size-gb: 16
      - name: Setup Binfmt
        uses: docker/setup-qemu-action@v3
        with:
          image: 	tonistiigi/binfmt:desktop-master
      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@main
        with:
          extra-conf: |
            extra-platforms = aarch64-linux
      - run: |
          cat /etc/nix/nix.conf
          nix build --no-link .#packages.x86_64-linux.default
          nix build --print-build-logs --no-link .#packages.aarch64-linux.default
      - uses: catchpoint/workflow-telemetry-action@master
      - uses: physics-enthusiast/nixos-run-action@main
        id: rebuild
        with:
          filesize: 40G
          memory: 16G
          image-path: /mnt/nixos.qcow2
          cmd: |
            nix build --no-link --log-lines 100 "/tmp/mnt"#nixosConfigurations.nixos.config.system.build.toplevel
            sudo nixos-rebuild boot --max-jobs auto --cores 2 --flake '/tmp/mnt#nixos'
      - uses: physics-enthusiast/nixos-run-action@main
        with:
          filesize: 40G
          memory: 16G
          image-path: /mnt/nixos.qcow2
          cmd: |
            nix build --print-build-logs --no-link /tmp/mnt#packages.aarch64-linux.default

  test2:
    runs-on: ubuntu-latest
    steps:
      - uses: DeterminateSystems/nix-installer-action@main
      - uses: DeterminateSystems/magic-nix-cache-action@main
      - uses: DamianReeves/write-file-action@master
        with:
          path: flake.nix
          write-mode: overwrite
          contents: |
            {
              inputs = {
                nixpkgs.url = "github:NixOS/nixpkgs/nixos-24.05";
              };
              outputs = { self, nixpkgs }:
              let
                pkgs = import nixpkgs { system = "x86_64-linux"; };
                frankenlibc = pkgs.stdenv.mkDerivation {
                  pname = "frankenlibc";
                  version = "4.19"; #version of the kernel
                  src = pkgs.fetchFromGitHub {
                    owner = "physics-enthusiast";
                    repo = "frankenlibc";
                    rev = "7ed672ed9ba31a6e39ba15f82902016b2f49d8a5";
                    fetchSubmodules = true;
                    sha256 = "sha256-4yJ31OK8RxJEuUHldZ7ip8sEvwPZwB4SyU+ub7m4218=";
                  };

                  buildInputs = [ pkgs.zlib ];

                  nativeBuildInputs = [ pkgs.which pkgs.bison pkgs.flex pkgs.bc pkgs.python3 ];
                  
                  postPatch = ''
                    patchShebangs --build ./
                    substituteInPlace build.sh \
                      --replace-fail '/bin/echo' 'echo' \
                      --replace-fail '#!/bin/sh' '#!${pkgs.stdenv.shell}' \
                      --replace-fail '-static' '''
                    substituteInPlace Makefile \
                      --replace-fail 'build.sh' "./build.sh -d $out -k linux notest"
                    substituteInPlace src/build.sh \
                      --replace-fail '/bin/pwd' 'pwd'
                    substituteInPlace linux/tools/lkl/Makefile.autoconf \
                      --replace-fail '/bin/echo' 'echo'
                  '';

                  env.NIX_CFLAGS_COMPILE = toString [
                    "-Wno-error=maybe-uninitialized"
                    "-U_FORTIFY_SOURCE"
                  ];

                  dontInstall = true;
                };
                pkgsFranken = import nixpkgs {
                  system = "x86_64-linux";
                  config.replaceStdenv = {pkgs}:
                  let
                    inherit (pkgs) stdenv;
                  in
                    (stdenv.override {
                      cc = stdenv.cc.override (old: {
                        libc = frankenlibc;
                        bintools = old.bintools.override {
                          libc = frankenlibc;
                          sharedLibraryLoader = pkgs.lib.getLib old.bintools.libc;
                        };
                        #nixSupport = (old.nixSupport or {}) // {
                        #  cc-cflags = (old.nixSupport.cc-cflags or []) ++ [
                        #    "--sysroot {frankenlibc}"
                        #  ];
                        #};
                      } // pkgs.lib.optionalAttrs old.isGNU {
                        cc = old.cc.overrideAttrs (prev: {
                          libcCross = frankenlibc;
                          # force the check for cross-compilation on without
                          # actually changing the triplet passed to cc (to
                          # isolate programs compiled with it from host headers)
                          stdenv = old.cc.stdenv // {
                            targetPlatform = old.cc.stdenv.targetPlatform // {
                              isFranken = true;
                            };
                          };
                        });
                      });
                      allowedRequisites = null;
                    });
                };
              in
              {
                packages."x86_64-linux".default = pkgsFranken.stdenv.cc.libc; #pkgsFranken.hello;
              };
            }
      - run: |
          tree $(nix build -L --print-out-paths --show-trace --keep-failed .#packages.x86_64-linux.default) || sudo cat /tmp/nix-build-hello-2.12.1.drv-0/build/hello-2.12.1/config.log

  test3:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          repository: physics-enthusiast/frankenlibc
          submodules: 'true'
      - run: |
          sudo mkdir -p /opt/rump && sudo chown -R $USER /opt/
          for file in `find patches/ -maxdepth 1 -type f` ; do patch -p1 < $file ; done
          for file in `find patches/linux/ -maxdepth 1 -type f` ; do patch -p1 < $file ; done
          ./build.sh -F CFLAGS="-fcommon -Wno-error=maybe-uninitialized" -j2 -d /opt/rump -q -k linux notest
