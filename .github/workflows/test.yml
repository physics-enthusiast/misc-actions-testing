name: Test
on:
  push:
  workflow_dispatch:
concurrency: 
  group: test
  cancel-in-progress: true

jobs:
  builds:
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Windows
            os: windows-latest
          - name: Linux
            os: ubuntu-latest
          - name: Darwin
            os: macos-latest
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - uses: insightsengineering/pip-action@v2
        with:
          packages: |
            pexpect
            fabric
      - name: Get paths
        id: get_paths
        run: |
          import os
          relpath = "${{ runner.temp }}" or "./"
          abspath = os.path.abspath(relpath)
          with open(os.environ['GITHUB_OUTPUT'], 'a') as fh:
              print(f'OUTDIR={abspath}', file=fh)
        shell: python
      - name: Prepare common shell (Windows)
        if: runner.os == 'Windows'
        uses: Vampire/setup-wsl@v2
        with:
          additional-packages:
            mkisofs
            openssh-client
            ca-certificates
            openssl
            aria2
      - name: Prepare common shell (Linux)
        if: runner.os == 'Linux'
        run: |
          mkdir bash-redirect
          ln -s $(which bash) bash-redirect/wsl-bash
          echo "$PWD/bash-redirect" >> $GITHUB_PATH
      - name: Prepare common shell (Darwin)
        if: runner.os == 'macOS'
        run: |
          mkdir bash-redirect
          ln -s $(which bash) bash-redirect/wsl-bash
          echo "$PWD/bash-redirect" >> $GITHUB_PATH
      - name: Install dependencies (Windows)
        if: runner.os == 'Windows'
        run: |
          choco install qemu
          Add-Content $env:GITHUB_PATH "C:\Program Files\qemu"
          echo "C:\\Windows\\System32\\bash.exe" >> $GITHUB_PATH
      - name: Install dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get -y install qemu-system mkisofs nmap
      - name: Install dependencies (Darwin)
        if: runner.os == 'macOS'
        run: |
          brew install qemu --force
          brew install dvdrtools
      - name: Fetch prebuilt NixOS image manifest
        id: read_manifest
        uses: cityoflosangeles/fetch-latest-github-release@v2.0.3
        with:
          github_token: ${{ github.token }}
          repo_path: "physics-enthusiast/nixos-image"
      - name: Restore cache
        id: restore-cache-image
        uses: actions/cache/restore@v4
        with:
          path: ${{ runner.temp }}/nixos.qcow2
          key: ${{ steps.read_manifest.outputs.tag_name }}
      - name: Fetch prebuilt NixOS image
        if: steps.restore-cache-image.outputs.cache-hit != 'true' 
        run: |
          sudo aria2c --dir="$TMPDIR" --out=nixos.qcow2 https://github.com/physics-enthusiast/nixos-image/releases/download/${{ steps.read_manifest.outputs.tag_name }}/nixos.qcow2
        shell: wsl-bash {0}
        env:
          WSLENV: GITHUB_OUTPUT/p:TMPDIR/p
          TMPDIR: ${{ runner.temp }}
      - name: Save cache
        id: save-cache-image
        uses: actions/cache/save@v4
        if: steps.restore-cache-image.outputs.cache-hit != 'true'
        with:
          path: ${{ runner.temp }}/nixos.qcow2
          key: ${{ steps.read_manifest.outputs.tag_name }}
      - name: Generate SSH keys
        id: ssh_keygen
        run: |
          ssh-keygen -b 1024 -t dsa -f $TMPDIR/sshkey -q -N ""
          echo "PUBLIC_KEY=$(cat $TMPDIR/sshkey.pub)" >> $GITHUB_OUTPUT
          {
            echo 'PRIVATE_KEY<<EOF'
            cat $TMPDIR/sshkey
            echo EOF
          } >> "$GITHUB_OUTPUT"
        shell: wsl-bash {0}
        env:
          WSLENV: GITHUB_OUTPUT/p:TMPDIR/p
          TMPDIR: ${{ runner.temp }}
      - name: Prepare cloud-init data
        run: |
          cat <<EOF >> $TMPDIR/user-data
          #cloud-config
          shell: /bin/bash
          sudo: ALL=(ALL) NOPASSWD:ALL
          ssh-authorized-keys: 
            - ${{ env.PUBLIC_KEY }} 
          EOF
          cat $TMPDIR/user-data
          touch $TMPDIR/meta-data
          mkisofs -output $TMPDIR/seed.iso -volid cidata -joliet -rock $TMPDIR/user-data $TMPDIR/meta-data
        shell: wsl-bash {0}
        env:
          WSLENV: GITHUB_OUTPUT/p:TMPDIR/p:PUBLIC_KEY
          TMPDIR: ${{ runner.temp }}
          PUBLIC_KEY: ${{ steps.ssh_keygen.outputs.PUBLIC_KEY }}
      - name: Start VM
        run: |
          import os
          import sys
          from pexpect import popen_spawn
          from fabric import Connection
          cmd = f"qemu-system-x86_64 -nographic -m 4096 -serial mon:stdio -smp {os.cpu_count()} -nic user,id=vmnic,hostfwd=tcp:127.0.0.1:60022-:22 -device virtio-scsi-pci,id=scsi0,num_queues=4 -device scsi-hd,drive=drive0,bus=scsi0.0,channel=0,scsi-id=0,lun=0 -drive file={os.environ['TMPDIR']}/nixos.qcow2,if=none,id=drive0 -cdrom {os.environ['TMPDIR']}/seed.iso"
          child = popen_spawn.PopenSpawn(cmd)
          child.logfile = sys.stdout.buffer
          child.expect('config-ssh ran successfully', timeout=None)
          print("SSH started")
          c = Connection(
              host="localhost",
              user="ops",
              port=60022,
              connect_kwargs={
                  "key_filename": f"{os.environ['TMPDIR']}/sshkey",
              },
          ).run('sh <(curl -L https://nixos.org/nix/install) --daemon')
        shell: python
        env:
          TMPDIR: ${{ runner.temp }}
      - name: Install Nix
        id: action-ssh
        uses: tiyee/action-ssh@v1.0.1
        with:
          host: 127.0.0.1
          port: 2222
          username: ops
          privateKey: ${{ steps.ssh_keygen.outputs.PRIVATE_KEY }} 
          command: |
            sh <(curl -L https://nixos.org/nix/install) --daemon

          
