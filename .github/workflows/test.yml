name: Test
on:
  push:
  workflow_dispatch:
concurrency: 
  group: test
  cancel-in-progress: true

jobs:
  builds:
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Windows
            os: windows-latest
          - name: Linux
            os: ubuntu-latest
          - name: Darwin
            os: macos-latest
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - uses: insightsengineering/pip-action@v2
        with:
          packages: |
            qemu.qmp==0.0.3
      - name: Get paths
        id: get_paths
        run: |
          import os
          relpath = "${{ runner.temp }}" or "./"
          abspath = os.path.abspath(relpath)
          with open(os.environ['GITHUB_OUTPUT'], 'a') as fh:
              print(f'OUTDIR={abspath}', file=fh)
        shell: python
      - name: Prepare common shell (Windows)
        if: runner.os == 'Windows'
        uses: Vampire/setup-wsl@v2
        with:
          additional-packages:
            ca-certificates
            openssl
            aria2
            p7zip-full
      - name: Prepare common shell (Linux)
        if: runner.os == 'Linux'
        run: |
          mkdir bash-redirect
          ln -s $(which bash) bash-redirect/wsl-bash
          echo "$PWD/bash-redirect" >> $GITHUB_PATH
      - name: Prepare common shell (Darwin)
        if: runner.os == 'macOS'
        run: |
          mkdir bash-redirect
          ln -s $(which bash) bash-redirect/wsl-bash
          echo "$PWD/bash-redirect" >> $GITHUB_PATH
      - name: Install dependencies (Windows)
        if: runner.os == 'Windows'
        run: |
          function msys2 {C:\\msys64\\usr\\bin\\env MSYSTEM=MINGW64 /usr/bin/bash -lc $args[0]} 
          msys2 @'
          pacman -Syu --noconfirm && \
          pacman -Su --noconfirm && \
          pacman -S base-devel mingw-w64-x86_64-toolchain git python ninja --noconfirm && \
          gcc --version && \
          pacman -S mingw-w64-x86_64-glib2 mingw-w64-x86_64-pixman python-setuptools --noconfirm && \
          pacman -S mingw-w64-x86_64-gtk3 mingw-w64-x86_64-SDL2 mingw-w64-x86_64-libslirp --noconfirm && \
          git config --global http.version HTTP/1.1
          git config --global http.postBuffer 157286400
          git clone https://github.com/patchew-project/qemu.git && \
          cd qemu && \
          git fetch --tags https://github.com/patchew-project/qemu tags/patchew/20230220100815.1624266-1-bin.meng@windriver.com && \
          git checkout tags/patchew/20230220100815.1624266-1-bin.meng@windriver.com && \
          curl https://gitlab.com/qemu-project/qemu/-/commit/d66ba6dc1cce914673bd8a89fca30a7715ea70d1.diff | git apply && \
          curl https://gitlab.com/qemu-project/qemu/-/commit/5cb993ff131fca2abef3ce074a20258fd6fce557.diff | git apply && \
          ./configure --enable-sdl --enable-gtk --disable-werror && \
          make && \
          make install
          '@
      - name: Install dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get -y install qemu-system
      - name: Install dependencies (Darwin)
        if: runner.os == 'macOS'
        run: |
          brew install qemu --force
      - name: Fetch prebuilt NixOS image manifest
        id: read_manifest
        uses: cityoflosangeles/fetch-latest-github-release@v2.0.3
        with:
          github_token: ${{ github.token }}
          repo_path: "physics-enthusiast/nixos-image"
      - name: Restore cache
        id: restore-cache-image
        uses: actions/cache/restore@v4
        with:
          path: ${{ runner.temp }}/nixos-qcow.7z
          key: ${{ steps.read_manifest.outputs.tag_name }}
      - name: Fetch prebuilt NixOS image
        if: steps.restore-cache-image.outputs.cache-hit != 'true' 
        run: |
          sudo aria2c --dir="$TMPDIR" https://github.com/physics-enthusiast/nixos-image/releases/download/${{ steps.read_manifest.outputs.tag_name }}/nixos-qcow.7z
        shell: wsl-bash {0}
        env:
          WSLENV: GITHUB_OUTPUT/p:TMPDIR/p
          TMPDIR: ${{ runner.temp }}
      - name: Save cache
        id: save-cache-image
        uses: actions/cache/save@v4
        if: steps.restore-cache-image.outputs.cache-hit != 'true'
        with:
          path: ${{ runner.temp }}/nixos-qcow.7z
          key: ${{ steps.read_manifest.outputs.tag_name }}
      - name: Extract image
        run: |
          mkdir $TMPDIR/extraction
          7z e $TMPDIR/nixos-qcow.7z -o"$TMPDIR/extraction"
          mv $TMPDIR/extraction/* $TMPDIR/nixos.qcow2
        shell: wsl-bash {0}
        env:
          WSLENV: GITHUB_OUTPUT/p:TMPDIR/p
          TMPDIR: ${{ runner.temp }}
      - name: Start VM
        run: |
          import os
          import sys
          import asyncio
          import socket
          from qemu.qmp import QMPClient
          cmd = f"qemu-system-x86_64 -nographic -m 4096 -chardev socket,id=qga0,host=localhost,port=9876,server=on -device virtio-serial -device virtserialport,chardev=qga0,name=org.qemu.guest_agent.0 -fsdev local,security_model=passthrough,id=fsdev0,path={os.environ['TMPDIR']}/extraction -device virtio-9p-pci,id=fs0,fsdev=fsdev0,mount_tag=hostshare -smp {os.cpu_count()} -nic user -hda {os.environ['TMPDIR']}/nixos.qcow2"
          async def main():
              proc = await asyncio.create_subprocess_shell(cmd)
              qmp = QMPClient()
              qmp.await_greeting = False
              qmp.negotiate = False
              while True:
                  try:
                      qga_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                      qga_sock.connect(('localhost', 9876))
                      break
                  except socket.error:
                      await asyncio.sleep(1) 
              await qmp.connect(qga_sock)
              res = await qmp.execute('guest-ping')
              print(f"VM status: {res}")
          asyncio.run(main())
        shell: python
        env:
          TMPDIR: ${{ runner.temp }}

          
