name: Test
on:
  push:
  workflow_dispatch:
concurrency: 
  group: test
  cancel-in-progress: true

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: DamianReeves/write-file-action@master
        with:
          path: flake.nix
          contents: |
            {
            inputs = {
              original.url = "github:physics-enthusiast/nixos-image/main?dir=nocloud";
              nixpkgs.follows = "original/nixpkgs";
            };

            outputs = { self, nixpkgs, original }:
              let
              overrideModule = { oldModule, newPkgs }: ({ config, pkgs, lib, modulesPath, ... }@inputs:
                let
                parsedModule = ( 
                  if isString oldModule
                  then
                    if builtins.substring 0 1 oldModule == "/"
                    then 
                      { key = oldModule; value = import oldModule; }
                    else 
                      { key = toString modulesPath + "/" + oldModule; value = import (toString modulesPath + "/" + oldModule); }

                  else if isConvertibleWithToString oldModule
                  then
                    if oldModule?key && oldModule.key != toString oldModule
                    then
                      throw "Module to be converted is an attribute set that can be converted to a string (${toString oldModule}) but also has a `.key` attribute (${oldModule.key}) with a different value. This makes it ambiguous which module should be disabled."
                    else
                      { key = (toString oldModule); value = import (toString oldModule); }
                      

                  else if isAttrs oldModule
                  then
                    if oldModule?key
                    then 
                      { key = oldModule.key; value = import (toString oldModule); }
                    else 
                      throw "Module to be converted is an attribute set, presumably a module, that does not have a `key` attribute. This means that the module system doesn't have any means to identify the original module that should be disabled. Make sure that you've passed the correct argument: a string path relative to modulesPath, a path value, or the module itself (as an attribute set)."

                  else 
                    throw "Module to be converted must be a path, string, the module itself (as an attribute set), or a value supported by toString. However, it is none of that, but is of type ${builtins.typeOf oldModule}.");
                in
                {
                  disabledModules = [ parsedModule.value ];
                }//(oldModule (inputs//{pkgs = newPkgs;}))
              );
              in
              original.outputs // {
              nixosConfigurations.nixos =
                original.nixosConfigurations.nixos.extendModules {
                  modules = [
                    original.nixosConfigurations.nixos.config.formatConfigs."qcow"
                    ({ lib, ... }: {
                      options = {
                        fileExtension = lib.mkOption {
                          type = lib.types.str;
                          description = "Declare the path of the wanted file in the output directory";
                          default = "";
                        };
                        formatAttr = lib.mkOption {
                          type = lib.types.str;
                          description = "Declare the default attribute to build";
                        };
                      };
                    })
                    ({ config, pkgs, lib, ... }: {
                      imports = [ (overrideModule "virtualisation/waydroid.nix" (import nixpkgs { system = "aarch64-linux"; })) ];
                      boot.binfmt.emulatedSystems = [ "aarch64-linux" ];
                      virtualisation.waydroid.enable = true;
                    })
                  ];
                };
              };
            }
          write-mode: overwrite
      - uses: physics-enthusiast/nixos-run-action@main
        with:
          cmd: |
            nixos-rebuild switch --flake '/tmp/mnt#nixos'

          
